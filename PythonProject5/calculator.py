"""
TACF Calculator Module
Implements the Physical Fitness Assessment Test calculations
Based on NSCA 54-1 DEZ 2024 document
"""
def calcular_pontos_cintura_masculino(circunferencia: float, estatura: float) -> float:
    # Tabela de pontos para cintura masculina por faixa de estatura
    tabela_pontos: dict[str, list[tuple[float, float]]] = {
        '166_166':[
            [102, 0.0], [101.5, 0.0], [101.0, 0.0], [100.5, 0.0], [100.0, 0.0], [99.5, 0.0], [99.0, 0.0], [98.5, 6.0],
            [98, 6.4], [97.5, 6.7], [97, 7.1], [96.5, 7.4], [96, 7.8], [95.5, 8.1], [95, 8.5], [94.5, 8.8], [94, 9.2],
            [93.5, 9.5], [93, 9.9], [92.5, 10.2], [92, 10.6], [91.5, 10.9], [91, 11.3], [90.5, 11.6], [90, 12.0],
            [89.5, 13.3], [89, 14.6], [88.5, 15.9], [88, 17.1], [87.5, 18.4], [87, 19.7], [86.5, 21.0], [86, 22.5],
            [85.5, 24.0], [85, 25.5], [84.5, 27.0], [84, 27.8], [83.5, 28.2], [83, 28.6], [82.5, 30.0]
        ],
        '167_171':[
            [102, 0.0], [101.5, 0.0], [101.0, 0.0], [100.5, 0.0], [100.0, 0.0], [99.5, 0.0], [99.0, 0.0], [98.5, 6.0],
            [98, 6.4], [97.5, 6.8], [97, 7.2], [96.5, 7.6], [96, 8.0], [95.5, 8.4], [95, 8.8], [94.5, 9.2], [94, 9.2],
            [93.5, 10.0], [93, 10.4], [92.5, 10.8], [92, 11.2], [91.5, 11.6], [91, 12.0], [90.5, 13.3], [90, 14.6],
            [89.5, 15.9], [89, 17.1], [88.5, 18.4], [88, 19.7], [87.5, 21.0], [87, 22.5], [86.5, 24.0], [86, 25.5],
            [85.5, 27.0], [85, 27.8], [84.5, 28.2], [84, 28.6], [83.5, 30.0], [83, 30.0], [82.5, 30.0]
        ],
        '172_175':[
            [102, 0.0], [101.5, 0.0], [101.0, 0.0], [100.5, 0.0], [100.0, 0.0], [99.5, 0.0], [99.0, 0.0], [98.5, 6.0],
            [98, 6.5], [97.5, 6.9], [97, 7.4], [96.5, 7.8], [96, 8.3], [95.5, 8.8], [95, 9.2], [94.5, 9.7], [94, 10.2],
            [93.5, 10.6], [93, 11.1], [92.5, 11.5], [92, 12.0], [91.5, 13.3], [91, 14.6], [90.5, 15.9], [90, 17.1],
            [89.5, 18.4], [89, 19.7], [88.5, 21.0], [88, 22.5], [87.5, 24.0], [87, 25.5], [86.5, 27.0], [86, 27.8],
            [85.5, 28.2], [85, 28.6], [84.5, 30.0], [84, 30.0], [83.5, 30.0],[83, 30.0], [82.5, 30.0]
        ],
        '176_180':[
            [102, 0.0], [101.5, 0.0], [101.0, 0.0], [100.5, 0.0], [100.0, 0.0], [99.5, 0.0], [99.0, 0.0], [98.5, 6.0],
            [98, 6.5], [97.5, 7.1], [97, 7.6], [96.5, 8.0], [96, 8.7], [95.5, 9.3], [95, 9.8], [94.5, 10.4], [94, 10.9],
            [93.5, 11.3], [93, 12.0], [92.5, 13.3], [92, 14.6], [91.5, 15.9], [91, 17.1], [90.5, 18.4], [90, 19.7],
            [89.5, 21.0], [89, 22.5], [88.5, 24.0], [88, 25.5], [87.5, 27.0], [87, 27.8], [86.5, 28.2], [86, 28.6],
            [85.5, 30.0], [85, 30.0], [84.5, 30.0], [84, 30.0], [83.5, 30.0], [83, 30.0], [82.5, 30.0]
        ],
        '181_188':[
            [102, 0.0], [101.5, 0.0], [101.0, 0.0], [100.5, 0.0], [100.0, 0.0], [99.5, 0.0], [99.0, 0.0], [98.5, 6.0],
            [98, 6.7], [97.5, 7.3], [97, 8.0], [96.5, 8.7], [96, 9.3], [95.5, 10.0], [95, 10.7], [94.5, 11.3],
            [94, 12.0], [93.5, 13.0], [93, 14.0], [92.5, 15.0], [92, 16.0], [91.5, 17.0], [91, 18.0], [90.5, 19.0],
            [90, 20.0], [89.5, 21.0], [89, 23.0], [88.5, 25.0], [88, 27.0], [87.5, 27.8], [87, 28.2], [86.5, 28.6],
            [86, 30.0], [85.5, 30.0], [85, 30.0], [84.5, 30.0], [84, 30.0], [83.5, 30.0], [83, 30.0], [82.5, 30.0]
        ],
        '189_220':[
            [102, 0.0], [101.5, 0.0], [101.0, 0.0], [100.5, 0.0], [100.0, 0.0], [99.5, 0.0], [99.0, 0.0], [98.5, 6.0],
            [98, 6.7], [97.5, 7.7], [97, 8.6], [96.5, 9.4], [96, 10.3], [95.5, 11.1], [95, 12.0], [94.5, 13.3],
            [94, 14.6], [93.5, 15.9], [93, 17.1], [92.5, 18.4], [92, 19.7], [91.5, 21.0], [91, 22.5], [90.5, 24.0],
            [90, 25.5], [89.5, 27.0], [89, 27.8], [88.5, 28.2], [88, 28.6], [87.5, 30.0], [87, 30.0], [86.5, 30.0],
            [86, 30.0], [85.5, 30.0], [85, 30.0], [84.5, 30.0], [84, 30.0], [83.5, 30.0], [83, 30.0], [82.5, 30.0]
        ]
    }

    # Determinar a faixa de estatura
    if estatura <= 166:
        faixa = '166_166'
    elif estatura <= 171:
        faixa = '167_171'
    elif estatura <= 175:
        faixa = '172_175'
    elif estatura <= 180:
        faixa = '176_180'
    elif estatura <= 188:
        faixa = '181_188'
    else:
        faixa = '189_220'

    # Obter a tabela de valores da faixa correspondente
    valores = tabela_pontos.get(faixa, [])

    # Encontrar a pontuação correspondente à circunferência
    for limite, pontos in valores:
        if circunferencia >= limite:
            return pontos

    return 30.0  # Valor padrão se a circunferência for menor que todos os limites


def calcular_pontos_cintura_feminino(circunferencia: float, estatura: float) -> float:
    """
    Calcula os pontos com base na circunferência da cintura e estatura feminina,
    conforme a tabela oficial NSCA 54-1 DEZ 2024.
    """

    # Tabela de pontos para cintura feminina por faixa de estatura
    tabela_pontos = {
        '161_menos': [
            (92.5, 0.0), (92.0, 0.0), (91.5, 0.0), (91.0, 0.0), (90.5, 0.0), (90.0, 0.0), (89.5, 6.0),
            (89.0, 6.7), (88.5, 7.3), (88.0, 8.0), (87.5, 8.7), (87.0, 9.3), (86.5, 10.0), (86.0, 10.7),
            (85.5, 11.3), (85.0, 12.0), (84.5, 13.5), (84.0, 15.0), (83.5, 16.5), (83.0, 18.0), (82.5, 19.5),
            (82.0, 21.0), (81.5, 23.0), (81.0, 25.0), (80.5, 27.0), (80.0, 27.8), (79.5, 28.2), (79.0, 28.6),
            (78.5, 30.0)
        ],
        '162_166': [
            (92.5, 0.0), (92.0, 0.0), (91.5, 0.0), (91.0, 0.0), (90.5, 0.0), (90.0, 0.0), (89.5, 6.0),
            (89.0, 6.7), (88.5, 7.3), (88.0, 8.0), (87.5, 8.7), (87.0, 9.3), (86.5, 10.0), (86.0, 10.7),
            (85.5, 11.3), (85.0, 12.0), (84.5, 16.5), (84.0, 21.0), (83.5, 23.0), (83.0, 25.0), (82.5, 27.0),
            (82.0, 27.8), (81.5, 28.2), (81.0, 28.6), (80.5, 30.0), (80.0, 30.0), (79.5, 30.0), (79.0, 30.0),
            (78.5, 30.0)
        ],
        '167_mais': [
            (92.5, 0.0), (92.0, 0.0), (91.5, 0.0), (91.0, 0.0), (90.5, 0.0), (90.0, 0.0), (89.5, 6.0),
            (89.0, 7.2), (88.5, 8.4), (88.0, 9.6), (87.5, 10.8), (87.0, 12.0), (86.5, 14.3), (86.0, 15.8),
            (85.5, 17.3), (85.0, 21.0), (84.5, 23.0), (84.0, 25.0), (83.5, 27.0), (83.0, 27.8), (82.5, 28.2),
            (82.0, 28.6), (81.5, 30.0), (81.0, 30.0), (80.5, 30.0), (80.0, 30.0), (79.5, 30.0), (79.0, 30.0),
            (78.5, 30.0)
        ]
    }

    # Determina a faixa de estatura
    if estatura <= 161:
        range_key = '161_menos'
    elif estatura <= 166:
        range_key = '162_166'
    else:
        range_key = '167_mais'

    # Obtém a tabela correspondente
    valores = tabela_pontos[range_key]

    # Percorre a tabela e retorna a pontuação correspondente
    for limite, pontos in valores:
        if circunferencia >= limite:
            return pontos

    return 30.0  # Retorno padrão se a circunferência for menor que todos os limites

def calcular_pontos_flexao_masculino(repeticoes, idade):
    # Definição das faixas etárias conforme o documento
    faixas_etarias = {
        (0, 20): 0,
        (21, 30): 1,
        (31, 34): 2,
        (35, 38): 3,
        (39, 41): 4,
        (42, 43): 5,
        (44, 49): 6,
        (50, 52): 7,
        (53, float('inf')): 8  # Idade ≥ 53
    }

    # Tabela completa de pontuação conforme o documento
    tabela_pontos = {
        9:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        10: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        11: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0],
        12: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.3],
        13: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.3, 2.7],
        14: [0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.3, 2.7, 3.0],
        15: [0.0, 0.0, 0.0, 0.0, 2.0, 2.3, 2.7, 3.0, 3.3],
        16: [0.0, 0.0, 0.0, 0.0, 2.2, 2.7, 3.0, 3.3, 3.7],
        17: [0.0, 0.0, 0.0, 2.0, 2.4, 3.0, 3.3, 3.7, 4.0],
        18: [0.0, 0.0, 0.0, 2.3, 2.6, 3.3, 3.7, 4.0, 4.6],
        19: [0.0, 0.0, 0.0, 2.5, 2.8, 3.7, 4.0, 4.4, 5.2],
        20: [0.0, 0.0, 2.0, 2.8, 3.0, 4.0, 4.5, 4.9, 5.8],
        21: [0.0, 0.0, 2.2, 3.0, 3.2, 4.3, 5.0, 5.3, 6.4],
        22: [0.0, 2.0, 2.4, 3.3, 3.4, 4.7, 5.5, 5.7, 7.0],
        23: [0.0, 2.2, 2.7, 3.5, 3.6, 5.0, 6.0, 6.1, 7.3],
        24: [0.0, 2.4, 2.9, 3.8, 3.8, 5.3, 6.5, 6.6, 7.6],
        25: [2.0, 2.7, 3.1, 4.0, 4.0, 5.7, 7.0, 7.0, 7.9],
        26: [2.2, 2.9, 3.3, 4.3, 4.3, 6.0, 7.2, 7.4, 8.1],
        27: [2.4, 3.1, 3.6, 4.5, 4.6, 6.3, 7.4, 7.8, 8.4],
        28: [2.7, 3.3, 3.8, 4.8, 4.9, 6.7, 7.5, 8.2, 8.7],
        29: [2.9, 3.6, 4.0, 5.0, 5.2, 7.0, 7.7, 8.6, 9.0],
        30: [3.1, 3.8, 4.3, 5.3, 5.5, 7.2, 7.9, 9.0, 9.5],
        31: [3.3, 4.0, 4.6, 5.5, 5.8, 7.4, 8.1, 9.3, 10.0],
        32: [3.6, 4.3, 4.9, 5.8, 6.1, 7.7, 8.3, 9.7, 10.0],
        33: [3.8, 4.5, 5.2, 6.0, 6.4, 7.9, 8.5, 10.0, 10.0],
        34: [4.0, 4.8, 5.5, 6.3, 6.7, 8.1, 8.6, 10.0, 10.0],
        35: [4.3, 5.1, 5.8, 6.5, 7.0, 8.3, 8.8, 10.0, 10.0],
        36: [4.5, 5.4, 6.1, 6.8, 7.3, 8.6, 9.0, 10.0, 10.0],
        37: [4.8, 5.6, 6.4, 7.0, 7.7, 8.8, 9.3, 10.0, 10.0],
        38: [5.1, 5.9, 6.7, 7.3, 8.0, 9.0, 9.7, 10.0, 10.0],
        39: [5.4, 6.2, 7.0, 7.7, 8.3, 9.3, 10.0, 10.0, 10.0],
        40: [5.6, 6.5, 7.3, 8.0, 8.7, 9.7, 10.0, 10.0, 10.0],
        41: [5.9, 6.7, 7.6, 8.3, 9.0, 10.0, 10.0, 10.0, 10.0],
        42: [6.2, 7.0, 7.9, 8.7, 9.3, 10.0, 10.0, 10.0, 10.0],
        43: [6.5, 7.2, 8.1, 9.0, 9.7, 10.0, 10.0, 10.0, 10.0],
        44: [6.7, 7.4, 8.4, 9.3, 10.0, 10.0, 10.0, 10.0, 10.0],
        45: [7.0, 7.5, 8.7, 9.7, 10.0, 10.0, 10.0, 10.0, 10.0],
        46: [7.2, 7.7, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        47: [7.4, 7.9, 9.3, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        48: [7.6, 8.1, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        49: [7.8, 8.3, 9.8, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        50: [8.0, 8.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        55: [9.0, 9.4, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        56: [9.2, 9.6, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        57: [9.4, 9.8, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        58: [9.6, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        59: [9.8, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        60: [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        61: [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]
    }

    # Encontrar a faixa etária correspondente
    indice_faixa = None
    for faixa, indice in faixas_etarias.items():
        if faixa[0] <= idade <= faixa[1]:
            indice_faixa = indice
            break

    if indice_faixa is None:
        return 0.0  # Caso a idade não esteja na tabela

    # Encontrar a pontuação correspondente à repetição
    repeticoes_validas = sorted(tabela_pontos.keys())

    for reps in repeticoes_validas:
        if repeticoes <= reps:
            return tabela_pontos[reps][indice_faixa]

    return 10.0  # Caso o número de repetições seja maior que o máximo listado

def calcular_pontos_flexao_feminino(repeticoes, idade):
    # Definição das faixas etárias conforme o documento
    faixas_etarias = {
        (18, 21): 0,
        (22, 25): 1,
        (26, 29): 2,
        (30, 33): 3,
        (34, 37): 4,
        (38, 41): 5,
        (42, 45): 6,
        (46, float('inf')): 7  # Idade ≥ 46
    }

    # Tabela completa de pontuação conforme o documento
    tabela_pontos = {
        0:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        2:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        3:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        4:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        5:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        6:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0],
        7:  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0],
        8:  [0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 4.8],
        9:  [0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 4.6, 5.6],
        10: [0.0, 0.0, 0.0, 2.0, 4.0, 4.6, 5.2, 6.3],
        11: [2.0, 0.0, 2.0, 4.0, 4.6, 5.2, 5.8, 7.0],
        12: [4.0, 2.0, 4.0, 4.6, 5.2, 5.8, 6.4, 7.7],
        13: [4.6, 4.0, 4.6, 5.2, 5.8, 6.4, 7.0, 8.4],
        14: [5.2, 4.5, 5.2, 5.8, 6.4, 7.0, 7.7, 9.0],
        15: [5.8, 5.0, 5.8, 6.4, 7.0, 7.7, 8.4, 9.4],
        16: [6.4, 5.5, 6.4, 7.0, 7.7, 8.4, 9.0, 9.7],
        17: [7.0, 6.0, 7.0, 7.7, 8.4, 9.0, 9.3, 10.0],
        18: [7.7, 6.5, 7.7, 8.4, 9.0, 9.3, 9.5, 10.0],
        19: [8.4, 7.0, 8.4, 9.0, 9.3, 9.5, 9.8, 10.0],
        20: [9.0, 7.7, 9.0, 9.3, 9.5, 9.8, 10.0, 10.0],
        21: [9.3, 8.4, 9.3, 9.5, 9.8, 10.0, 10.0, 10.0],
        22: [9.5, 9.0, 9.5, 9.8, 10.0, 10.0, 10.0, 10.0],
        23: [9.8, 9.3, 9.8, 10.0, 10.0, 10.0, 10.0, 10.0],
        24: [10.0, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        25: [10.0, 9.8, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        26: [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]
    }

    # Encontrar a faixa etária correspondente
    indice_faixa = None
    for faixa, indice in faixas_etarias.items():
        if faixa[0] <= idade <= faixa[1]:
            indice_faixa = indice
            break

    if indice_faixa is None:
        return 0.0  # Caso a idade não esteja na tabela

    # Encontrar a pontuação correspondente à repetição
    repeticoes_validas = sorted(tabela_pontos.keys())

    for reps in repeticoes_validas:
        if repeticoes <= reps:
            return tabela_pontos[reps][indice_faixa]

    return 10.0  # Caso o número de repetições seja maior que o máximo listado

    # Achar a pontuação correspondente ou a mais próxima inferior
    for reps in repeticoes_validas :
        if repeticoes <= reps :
            return tabela_pontos[reps][indice_faixa]

    return 10.0  # Caso o número de repetições seja maior que o máximo listado

def calcular_pontos_abdominal_masculino(repeticoes, idade):
    """
    Calcula os pontos para o teste de abdominais masculino com base no número de repetições e idade.
    """
    # Definição das faixas etárias conforme o documento
    faixas_etarias = {
        (16, 27): 0, (28, 30): 1, (31, 33): 2, (34, 35): 3, (36, 38): 4,
        (39, 41): 5, (42, 44): 6, (45, 50): 7, (51, float('inf')): 8
    } # Faixa etária maior ou igual a 51

    # Tabela completa de pontuação conforme o documento
    tabela_pontos = {
        16: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        17: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        18: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        19: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        20: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0],  # A partir de 20 repetições, faixa 51+ tem 2.0 pontos
        21: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3],
        22: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.6],
        23: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3, 2.9],
        24: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5, 3.1],
        25: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.8, 3.4],
        26: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3, 3.0, 3.7],
        27: [0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.7, 3.3, 4.0],
        28: [0.0, 0.0, 0.0, 0.0, 0.0, 2.2, 3.0, 3.5, 4.4],
        29: [0.0, 0.0, 0.0, 0.0, 0.0, 2.4, 3.3, 3.8, 4.8],
        30: [0.0, 0.0, 0.0, 0.0, 2.0, 2.7, 3.7, 4.0, 5.1],
        31: [0.0, 0.0, 0.0, 0.0, 2.0, 2.7, 3.7, 4.0, 5.1],
        32: [0.0, 0.0, 2.0, 2.2, 2.4, 3.1, 4.3, 4.8, 5.9],
        33: [0.0, 0.0, 2.2, 2.4, 2.7, 3.3, 4.7, 5.1, 6.3],
        34: [0.0, 0.0, 2.4, 2.7, 2.9, 3.6, 5.0, 5.5, 6.6],
        35: [0.0, 2.0, 2.6, 2.9, 3.1, 3.8, 5.3, 5.9, 7.0],
        36: [0.0, 2.2, 2.8, 3.1, 3.3, 4.0, 5.7, 6.3, 7.4],
        37: [2.0, 2.4, 3.0, 3.3, 3.6, 4.3, 6.0, 6.6, 7.8],
        38: [2.3, 2.6, 3.2, 3.6, 3.8, 4.6, 6.3, 7.0, 8.2],
        39: [2.5, 2.8, 3.4, 3.8, 4.0, 4.9, 6.7, 7.2, 8.6],
        40: [2.8, 3.0, 3.6, 4.0, 4.3, 5.2, 7.0, 7.4, 9.0],
        41: [2.8, 3.0, 3.6, 4.0, 4.3, 5.2, 7.0, 7.4, 9.0],
        42: [3.3, 3.4, 4.0, 4.6, 5.0, 5.8, 7.4, 7.8, 9.7],
        43: [3.5, 3.6, 4.4, 4.9, 5.3, 6.1, 7.6, 8.0, 10.0],
        44: [3.8, 3.8, 4.8, 5.2, 5.7, 6.4, 7.8, 8.2, 10.0],
        45: [4.0, 4.0, 5.5, 5.1, 6.0, 6.7, 8.0, 8.4, 10.0],
        46: [4.3, 4.4, 5.5, 5.8, 6.3, 7.0, 8.2, 8.6, 10.0],
        47: [4.6, 4.8, 5.9, 6.1, 6.7, 7.3, 8.4, 8.8, 10.0],
        48: [4.9, 5.1, 6.3, 6.4, 7.0, 7.6, 8.6, 9.0, 10.0],
        49: [5.2, 5.5, 6.6, 6.7, 7.3, 7.9, 8.8, 9.3, 10.0],
        50: [5.5, 5.9, 7.0, 7.0, 7.6, 8.1, 9.0, 9.7, 10.0],
        51: [5.8, 6.3, 7.3, 7.3, 7.9, 8.4, 9.3, 10.0, 10.0],
        52: [6.1, 6.6, 7.5, 7.7, 8.1, 8.7, 9.7, 10.0, 10.0],
        53: [6.4, 7.0, 7.8, 8.0, 8.4, 9.0, 10.0, 10.0, 10.0],
        54: [6.7, 7.3, 8.0, 8.3, 8.7, 9.3, 10.0, 10.0, 10.0],
        55: [7.0, 7.5, 8.3, 8.7, 9.0, 9.7, 10.0, 10.0, 10.0],
        56: [7.3, 7.8, 8.5, 9.0, 9.3, 10.0, 10.0, 10.0, 10.0],
        57: [7.6, 8.0, 8.8, 9.3, 9.7, 10.0, 10.0, 10.0, 10.0],
        58: [7.9, 8.3, 9.0, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0],
        59: [8.1, 8.5, 9.3, 9.8, 10.0, 10.0, 10.0, 10.0, 10.0],
        60: [8.4, 8.8, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        61: [8.4, 8.8, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        62: [9.0, 9.3, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        63: [9.3, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        64: [9.5, 9.8, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        65: [9.8, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        66: [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]
    }

    # Encontrar a faixa etária correspondente
    indice_faixa = None
    for faixa, indice in faixas_etarias.items():
        if faixa[0] <= idade <= faixa[1]:
            indice_faixa = indice
            break

    if indice_faixa is None:
        return 0.0  # Caso a idade não esteja na tabela

    # Encontrar a pontuação correspondente à repetição
    repeticoes_validas = sorted(tabela_pontos.keys())

    for reps in repeticoes_validas:
        if repeticoes <= reps:
            return tabela_pontos[reps][indice_faixa]

    return 10.0  # Caso o número de repetições seja maior que o máximo listado

def calcular_pontos_abdominal_feminino(repeticoes, idade):
    # Definição das faixas etárias conforme o documento
    faixas_etarias = {
        (16, 23): 0, (24, 25): 1, (26, 28): 2, (29, 30): 3, (31, 34): 4,
        (35, 38): 5, (39, 41): 6, (42, 45): 7, (46, 49): 8, (50, float('inf')): 9
    } # Faixa etária maior ou igual a 51

    # Tabela completa de pontuação conforme o documento
    tabela_pontos = {
        8: [0.0] * 10, 9: [0.0] * 10, 10: [0.0] * 10,
        11: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0],  # A partir de 11 repetições, faixa 50+ tem 2.0 pontos
        12: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.3],
        13: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3, 2.6],
        14: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5, 2.9],
        15: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.8, 3.1],
        16: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3, 3.0, 3.4],
        17: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.6, 3.3, 3.7],
        18: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2, 2.9, 3.5, 4.0],
        19: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.4, 3.1, 3.8, 4.4],
        20: [0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.7, 3.4, 4.0, 4.9],
        21: [0.0, 0.0, 0.0, 0.0, 2.0, 2.2, 2.9, 3.7, 4.3, 5.3],
        22: [0.0, 0.0, 0.0, 0.0, 2.2, 2.4, 3.1, 4.0, 4.7, 5.7],
        23: [0.0, 0.0, 0.0, 0.0, 2.4, 2.6, 3.3, 4.4, 5.0, 6.1],
        24: [0.0, 0.0, 0.0, 0.0, 2.5, 2.8, 3.6, 4.8, 5.3, 6.6],
        25: [0.0, 0.0, 0.0, 2.0, 2.7, 3.0, 3.8, 5.1, 5.7, 7.0],
        26: [0.0, 0.0, 0.0, 2.2, 2.9, 3.2, 4.0, 5.5, 6.0, 7.4],
        27: [0.0, 0.0, 2.0, 2.4, 3.1, 3.4, 4.2, 5.9, 6.3, 7.8],
        28: [0.0, 0.0, 2.2, 2.6, 3.3, 3.6, 4.5, 6.3, 6.7, 8.2],
        29: [0.0, 2.0, 2.4, 2.8, 3.5, 3.8, 4.7, 6.6, 7.0, 8.6],
        30: [2.0, 2.2, 2.6, 3.0, 3.6, 4.0, 4.9, 7.0, 7.2, 9.0],
        31: [2.2, 2.4, 2.8, 3.2, 3.8, 4.3, 5.2, 7.2, 7.4, 9.5],
        32: [2.4, 2.6, 3.0, 3.4, 4.0, 4.6, 5.4, 7.3, 7.5, 10.0],
        33: [2.6, 2.8, 3.2, 3.6, 4.3, 4.9, 5.6, 7.5, 7.7, 10.0],
        34: [2.8, 3.0, 3.4, 3.8, 4.6, 5.2, 5.8, 7.7, 7.9, 10.0],
        35: [3.0, 3.2, 3.6, 4.0, 4.9, 5.5, 6.1, 7.8, 8.1, 10.0],
        36: [3.2, 3.4, 3.8, 4.3, 5.2, 5.8, 6.3, 8.0, 8.3, 10.0],
        37: [3.4, 3.6, 4.0, 4.6, 5.5, 6.1, 6.5, 8.2, 8.5, 10.0],
        38: [3.6, 3.8, 4.3, 4.9, 5.8, 6.4, 6.8, 8.3, 8.6, 10.0],
        39: [3.8, 4.0, 4.6, 5.2, 6.1, 6.7, 7.0, 8.5, 8.8, 10.0],
        40: [4.0, 4.3, 4.9, 5.5, 6.4, 7.0, 7.3, 8.7, 9.0, 10.0],
        41: [4.3, 4.7, 5.2, 5.8, 6.7, 7.2, 7.6, 8.8, 9.5, 10.0],
        42: [4.6, 5.0, 5.5, 6.1, 7.0, 7.4, 7.9, 9.0, 10.0, 10.0],
        43: [4.9, 5.3, 5.8, 6.4, 7.3, 7.7, 8.1, 9.5, 10.0, 10.0],
        44: [5.2, 5.7, 6.1, 6.7, 7.5, 7.9, 8.4, 10.0, 10.0, 10.0],
        45: [5.5, 6.0, 6.4, 7.0, 7.8, 8.1, 8.7, 10.0, 10.0, 10.0],
        46: [5.8, 6.3, 6.7, 7.3, 8.0, 8.3, 9.0, 10.0, 10.0, 10.0],
        47: [6.1, 6.7, 7.0, 7.5, 8.3, 8.6, 9.3, 10.0, 10.0, 10.0],
        48: [6.4, 7.0, 7.3, 7.8, 8.5, 8.8, 9.7, 10.0, 10.0, 10.0],
        49: [6.7, 7.3, 7.5, 8.0, 8.8, 9.0, 10.0, 10.0, 10.0, 10.0],
        50: [7.0, 7.5, 7.8, 8.3, 9.0, 9.3, 10.0, 10.0, 10.0, 10.0],
        51: [7.3, 7.8, 8.0, 8.5, 9.3, 9.7, 10.0, 10.0, 10.0, 10.0],
        52: [7.5, 8.0, 8.3, 8.8, 9.7, 10.0, 10.0, 10.0, 10.0, 10.0],
        53: [7.8, 8.3, 8.5, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        54: [8.0, 8.5, 8.8, 9.3, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        55: [8.3, 8.8, 9.0, 9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        56: [8.5, 9.0, 9.3, 9.8, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        57: [8.8, 9.3, 9.7, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        58: [9.0, 9.7, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        59: [9.3, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        60: [9.5, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        61: [9.8, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0],
        62: [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]
    }

    # Encontrar a faixa etária correspondente
    indice_faixa = None
    for faixa, indice in faixas_etarias.items():
        if faixa[0] <= idade <= faixa[1]:
            indice_faixa = indice
            break

    if indice_faixa is None:
        return 0.0  # Caso a idade não esteja na tabela

    # Encontrar a pontuação correspondente à repetição
    repeticoes_validas = sorted(tabela_pontos.keys())

    for reps in repeticoes_validas:
        if repeticoes <= reps:
            return tabela_pontos[reps][indice_faixa]

    return 10.0  # Caso o número de repetições seja maior que o máximo listado


def calcular_pontos_corrida_masculino(distancia, idade):
    # Definição das faixas etárias conforme o documento
    faixas_etarias = {
        (16, 29) : 0, (30, 31) : 1, (32, 35) : 2, (36, 38) : 3, (39, 41) : 4, (42, 43) : 5, (44, 47) : 6,
        (48, float( 'inf' )) : 7
    }  # Faixa etária maior ou igual a 48

    # Tabela completa de pontuação conforme o documento
    tabela_pontos = {
        1790 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1800 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1810 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1820 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1830 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1840 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1850 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1860 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1870 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1880 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        1890 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0],  # Faixa 48+ tem 10.0 pontos a partir de 1890 m
        1900 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.6],
        1910 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 11.3],
        1920 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.6, 11.9],
        1930 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.2, 12.5],
        1940 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.8, 13.1],
        1950 : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.4, 13.8],
        1960 : [0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.9, 14.4],
        1970 : [0.0, 0.0, 0.0, 0.0, 0.0, 10.7, 13.5, 15.0],
        1980 : [0.0, 0.0, 0.0, 0.0, 0.0, 11.4, 14.1, 15.6],
        1990 : [0.0, 0.0, 0.0, 0.0, 0.0, 12.1, 14.7, 16.3],
        2000 : [0.0, 0.0, 0.0, 0.0, 10.0, 12.9, 15.3, 16.9],
        2010 : [0.0, 0.0, 0.0, 10.0, 10.5, 13.6, 15.9, 17.5],
        2020 : [0.0, 0.0, 0.0, 10.4, 10.9, 14.3, 16.5, 18.1],
        2030 : [0.0, 0.0, 0.0, 10.8, 11.4, 15.0, 17.1, 18.8],
        2040 : [0.0, 0.0, 0.0, 11.3, 11.8, 15.7, 17.6, 19.4],
        2050 : [0.0, 0.0, 10.0, 11.7, 12.3, 16.4, 18.2, 20.0],
        2060 : [0.0, 0.0, 10.4, 12.1, 12.7, 17.1, 18.8, 20.7],
        2070 : [0.0, 0.0, 10.8, 12.5, 13.2, 17.9, 19.4, 21.4],
        2080 : [0.0, 10.0, 11.2, 12.9, 13.6, 18.6, 20.0, 22.0],
        2090 : [0.0, 10.4, 11.6, 13.3, 14.1, 19.3, 20.7, 22.7],
        2100 : [0.0, 10.7, 12.0, 13.8, 14.5, 20.0, 21.4, 23.4],
        2110 : [0.0, 11.1, 12.4, 14.2, 15.0, 20.6, 22.0, 24.1],
        2120 : [0.0, 11.5, 12.8, 14.6, 15.5, 21.2, 22.7, 24.8],
        2130 : [10.0, 11.9, 13.2, 15.0, 15.9, 21.8, 23.4, 25.5],
        2140 : [10.4, 12.2, 13.6, 15.4, 16.4, 22.4, 24.1, 26.1],
        2150 : [10.7, 12.6, 14.0, 15.8, 16.8, 23.0, 24.8, 26.8],
        2160 : [11.1, 13.0, 14.4, 16.3, 17.3, 23.6, 25.5, 27.5],
        2170 : [11.4, 13.3, 14.8, 16.7, 17.7, 24.2, 26.1, 28.2],
        2180 : [11.8, 13.7, 15.2, 17.1, 18.2, 24.8, 26.8, 28.9],
        2190 : [12.1, 14.1, 15.6, 17.5, 18.6, 25.4, 27.5, 29.5],
        2200 : [12.5, 14.4, 16.0, 17.9, 19.1, 26.0, 28.2, 30.2],
        2210 : [12.9, 14.8, 16.4, 18.3, 19.5, 26.6, 28.9, 30.9],
        2220 : [13.2, 15.2, 16.8, 18.8, 20.0, 27.2, 29.5, 31.6],
        2230 : [13.6, 15.6, 17.2, 19.2, 20.8, 27.8, 30.2, 32.3],
        2240 : [13.9, 15.9, 17.6, 19.6, 21.7, 28.4, 30.9, 33.0],
        2250 : [14.3, 16.3, 18.0, 20.0, 22.5, 29.0, 31.6, 33.6],
        2260 : [14.6, 16.7, 18.4, 20.5, 23.3, 29.6, 32.3, 34.3],
        2270 : [15.0, 17.0, 18.8, 21.0, 24.2, 30.2, 33.0, 35.0],
        2280 : [15.4, 17.4, 19.2, 21.5, 25.0, 30.8, 33.6, 35.6],
        2290 : [15.7, 17.8, 19.6, 22.0, 25.8, 31.4, 34.3, 36.2],
        2300 : [16.1, 18.1, 20.0, 22.5, 26.7, 32.0, 35.0, 36.8],
        2310 : [16.4, 18.5, 20.5, 23.0, 27.5, 32.6, 35.3, 37.4],
        2320 : [16.8, 18.9, 21.0, 23.5, 28.3, 33.2, 35.6, 37.9],
        2330 : [17.1, 19.3, 21.5, 24.0, 29.2, 33.8, 36.0, 38.5],
        2340 : [17.5, 19.6, 22.0, 24.5, 30.0, 34.4, 36.3, 39.1],
        2350 : [17.9, 20.0, 22.5, 25.0, 30.8, 35.0, 36.6, 39.7],
        2360 : [18.2, 20.6, 23.0, 25.5, 31.7, 35.3, 36.9, 40.3],
        2370 : [18.6, 21.1, 23.5, 26.0, 32.5, 35.6, 37.3, 40.9],
        2380 : [18.9, 21.7, 24.0, 26.5, 33.3, 36.0, 37.6, 41.5],
        2390 : [19.3, 22.2, 24.5, 27.0, 34.2, 36.3, 37.9, 42.1],
        2400 : [19.3, 22.2, 24.5, 27.0, 34.2, 36.3, 37.9, 42.1],
        2410 : [20.0, 23.3, 25.5, 28.0, 35.3, 36.9, 38.5, 43.2],
        2420 : [20.5, 23.9, 26.0, 28.5, 35.7, 37.3, 38.9, 43.8],
        2430 : [21.0, 24.4, 26.5, 29.0, 36.0, 37.6, 39.2, 44.4],
        2440 : [21.6, 25.0, 27.0, 29.5, 36.3, 37.9, 39.5, 45.0],
        2450 : [22.1, 25.6, 27.5, 30.0, 36.7, 38.2, 39.8, 46.3],
        2460 : [22.6, 26.1, 28.0, 30.5, 37.0, 38.5, 40.2, 47.5],
        2470 : [23.1, 26.7, 28.5, 31.0, 37.3, 38.9, 40.5, 48.8],
        2480 : [23.6, 27.2, 29.0, 31.5, 37.7, 39.2, 40.8, 50.0],
        2490 : [24.1, 27.8, 29.5, 32.0, 38.0, 39.5, 41.1, 50.0],
        2500 : [24.7, 28.3, 30.0, 32.5, 38.3, 39.8, 41.5, 50.0],
        2510 : [25.2, 28.9, 30.5, 33.0, 38.7, 40.2, 41.8, 50.0],
        2520 : [25.7, 29.4, 31.0, 33.5, 39.0, 40.5, 42.1, 50.0],
        2530 : [26.2, 30.0, 31.5, 34.0, 39.3, 40.8, 42.4, 50.0],
        2540 : [26.7, 30.6, 32.0, 34.5, 39.7, 41.1, 42.7, 50.0],
        2550 : [27.2, 31.1, 32.5, 35.0, 40.0, 41.5, 43.1, 50.0],
        2560 : [27.8, 31.7, 33.0, 35.4, 40.3, 41.8, 43.4, 50.0],
        2570 : [28.3, 32.2, 33.5, 35.8, 40.7, 42.1, 43.7, 50.0],
        2580 : [28.8, 32.8, 34.0, 36.3, 41.0, 42.4, 44.0, 50.0],
        2590 : [29.3, 33.3, 34.5, 36.7, 41.3, 42.7, 44.4, 50.0],
        2600 : [29.8, 33.9, 35.0, 37.1, 41.7, 43.1, 44.7, 50.0],
        2610 : [30.3, 34.4, 35.5, 37.5, 42.0, 43.4, 45.0, 50.0],
        2620 : [30.9, 35.0, 36.0, 37.9, 42.3, 43.7, 46.0, 50.0],
        2630 : [31.4, 35.5, 36.4, 38.3, 42.7, 44.0, 47.0, 50.0],
        2640 : [31.9, 36.0, 36.9, 38.8, 43.0, 44.4, 48.0, 50.0],
        2650 : [32.4, 36.4, 37.4, 39.2, 43.3, 44.7, 49.0, 50.0],
        2660 : [32.9, 36.9, 37.9, 39.6, 43.7, 45.0, 50.0, 50.0],
        2670 : [33.4, 37.4, 38.3, 40.0, 44.0, 46.3, 50.0, 50.0],
        2680 : [34.0, 37.9, 38.8, 40.4, 44.3, 47.5, 50.0, 50.0],
        2690 : [34.5, 38.3, 39.3, 40.8, 44.7, 48.8, 50.0, 50.0],
        2700 : [35.0, 38.8, 39.8, 41.3, 45.0, 50.0, 50.0, 50.0],
        2710 : [35.4, 39.3, 40.2, 41.7, 46.0, 50.0, 50.0, 50.0],
        2720 : [35.8, 39.8, 40.7, 42.1, 47.0, 50.0, 50.0, 50.0],
        2730 : [36.2, 40.2, 41.2, 42.5, 48.0, 50.0, 50.0, 50.0],
        2740 : [36.5, 40.7, 41.7, 42.9, 49.0, 50.0, 50.0, 50.0],
        2750 : [36.9, 41.2, 42.1, 43.3, 50.0, 50.0, 50.0, 50.0],
        2760 : [37.3, 41.7, 42.6, 43.8, 50.0, 50.0, 50.0, 50.0],
        2770 : [37.7, 42.1, 43.1, 44.2, 50.0, 50.0, 50.0, 50.0],
        2780 : [38.1, 42.6, 43.6, 44.6, 50.0, 50.0, 50.0, 50.0],
        2790 : [38.5, 43.1, 44.0, 45.0, 50.0, 50.0, 50.0, 50.0],
        2800 : [38.8, 43.6, 44.5, 46.0, 50.0, 50.0, 50.0, 50.0],
        2810 : [39.2, 44.0, 45.0, 47.0, 50.0, 50.0, 50.0, 50.0],
        2820 : [39.6, 44.5, 46.0, 48.0, 50.0, 50.0, 50.0, 50.0],
        2830 : [40.0, 45.0, 47.0, 49.0, 50.0, 50.0, 50.0, 50.0],
        2840 : [40.4, 45.7, 48.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2850 : [40.8, 46.4, 49.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2860 : [41.2, 47.1, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2870 : [41.5, 47.9, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2880 : [41.9, 48.6, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2890 : [42.3, 49.3, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2900 : [42.7, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2910 : [43.1, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2920 : [43.5, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2930 : [43.8, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2940 : [44.2, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2950 : [44.6, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2960 : [45.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2970 : [45.6, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2980 : [46.1, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        2990 : [46.7, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        3000 : [47.2, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        3010 : [47.8, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        3020 : [48.3, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        3030 : [48.9, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        3040 : [49.4, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
        3050 : [50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0]
    }

    # Encontrar a faixa etária correspondente
    indice_faixa = None
    for faixa, indice in faixas_etarias.items():
        if faixa[0] <= idade <= faixa[1]:
            indice_faixa = indice
            break

    if indice_faixa is None:
        return 0.0  # Caso a idade não esteja na tabela

    # Encontrar a pontuação correspondente à distância percorrida
    distancias_validas = sorted(tabela_pontos.keys())

    for dist in distancias_validas:
        if distancia <= dist:
            return tabela_pontos[dist][indice_faixa]

    return 50.0  # Caso a distância seja maior que o máximo listado



def calcular_pontos_corrida_feminino(distancia, idade):
    # Definição das faixas etárias conforme o documento
    faixas_etarias = {
        (16, 29): 0, (30, 33): 1, (34, 38): 2, (39, 44): 3, (45, float('inf')): 4
    }  # Faixa etária maior ou igual a 45

    # Tabela completa de pontuação conforme o documento
    tabela_pontos = {
        1470 : [0.0] * 5, 1480 : [0.0] * 5, 1490 : [0.0] * 5, 1500 : [0.0] * 5,
        1510 : [0.0] * 5, 1520 : [0.0] * 5, 1530 : [0.0] * 5,
        1540 : [0.0, 0.0, 0.0, 0.0, 10.0],  # Faixa 45+ tem 10.0 pontos a partir de 1540 m
        1550 : [0.0, 0.0, 0.0, 0.0, 10.9],
        1560 : [0.0, 0.0, 0.0, 0.0, 11.8],
        1570 : [0.0, 0.0, 0.0, 0.0, 12.7],
        1580 : [0.0, 0.0, 0.0, 0.0, 13.6],
        1590 : [0.0, 0.0, 0.0, 0.0, 14.5],
        1600 : [0.0, 0.0, 0.0, 10.0, 15.5],
        1610 : [0.0, 0.0, 0.0, 10.9, 16.4],
        1620 : [0.0, 0.0, 0.0, 11.8, 17.3],
        1630 : [0.0, 0.0, 0.0, 12.7, 18.2],
        1640 : [0.0, 0.0, 0.0, 13.6, 19.1],
        1650 : [0.0, 0.0, 10.0, 14.5, 20.0],
        1670 : [0.0, 0.0, 10.6, 15.5, 20.7],
        1680 : [0.0, 0.0, 11.1, 16.4, 21.4],
        1690 : [0.0, 0.0, 11.7, 17.3, 22.1],
        1700 : [0.0, 10.0, 12.2, 18.2, 22.9],
        1710 : [0.0, 10.6, 12.8, 19.1, 23.6],
        1720 : [0.0, 11.1, 13.3, 20.0, 24.3],
        1730 : [0.0, 11.7, 13.9, 20.8, 25.0],
        1740 : [0.0, 12.2, 14.4, 21.6, 25.7],
        1750 : [0.0, 12.8, 15.0, 22.4, 26.4],
        1760 : [0.0, 13.3, 15.6, 23.2, 27.1],
        1770 : [10.0, 13.9, 16.1, 23.9, 27.9],
        1780 : [10.5, 14.4, 16.7, 24.7, 28.6],
        1790 : [11.1, 15.0, 17.2, 25.5, 29.3],
        1800 : [11.6, 15.6, 17.8, 26.3, 30.0],
        1810 : [12.1, 16.1, 18.3, 27.1, 30.7],
        1820 : [13.2, 17.2, 19.4, 28.7, 32.1],
        1830 : [13.7, 17.8, 20.0, 29.5, 32.9],
        1840 : [14.2, 18.3, 20.6, 30.3, 33.6],
        1850 : [14.7, 18.9, 21.1, 31.1, 34.3],
        1860 : [15.3, 19.4, 21.7, 31.8, 35.0],
        1870 : [15.8, 20.0, 22.2, 32.6, 35.7],
        1880 : [16.3, 20.5, 22.8, 33.4, 36.4],
        1890 : [16.8, 21.1, 23.3, 34.2, 37.1],
        1900 : [17.4, 21.6, 23.9, 35.0, 37.9],
        1910 : [17.9, 22.1, 24.4, 35.3, 38.6],
        1920 : [18.4, 22.7, 25.0, 35.7, 39.3],
        1930 : [18.9, 23.2, 25.6, 36.0, 40.0],
        1940 : [19.5, 23.8, 26.1, 36.3, 40.7],
        1950 : [20.0, 24.3, 26.7, 36.7, 41.4],
        1960 : [20.6, 24.8, 27.2, 37.0, 42.1],
        1970 : [21.2, 25.4, 27.8, 37.3, 42.9],
        1980 : [21.8, 25.9, 28.3, 37.7, 43.6],
        1990 : [22.4, 26.4, 28.9, 38.0, 44.3],
        2000 : [23.0, 27.0, 29.4, 38.3, 45.0],
        2010 : [23.6, 27.5, 30.0, 38.7, 46.3],
        2020 : [24.2, 28.0, 30.6, 39.0, 47.5],
        2030 : [24.8, 28.6, 31.1, 39.3, 48.8],
        2040 : [25.4, 29.1, 31.7, 39.7, 50.0],
        2050 : [26.0, 29.6, 32.2, 40.0, 50.0],
        2060 : [26.6, 30.2, 32.8, 40.3, 50.0],
        2070 : [27.2, 30.7, 33.3, 40.7, 50.0],
        2080 : [27.8, 31.3, 33.9, 41.0, 50.0],
        2090 : [28.4, 31.8, 34.4, 41.3, 50.0],
        2100 : [29.0, 32.3, 35.0, 41.7, 50.0],
        2110 : [29.6, 32.9, 35.4, 42.0, 50.0],
        2120 : [30.2, 33.4, 35.8, 42.3, 50.0],
        2130 : [30.8, 33.9, 36.2, 42.7, 50.0],
        2140 : [31.4, 34.5, 36.5, 43.0, 50.0],
        2150 : [32.0, 35.0, 36.9, 43.3, 50.0],
        2160 : [32.6, 35.4, 37.3, 43.7, 50.0],
        2170 : [33.2, 35.8, 37.7, 44.0, 50.0],
        2180 : [33.8, 36.2, 38.1, 44.3, 50.0],
        2190 : [34.4, 36.6, 38.5, 44.7, 50.0],
        2200 : [35.0, 37.0, 38.8, 45.0, 50.0],
        2210 : [35.3, 37.4, 39.2, 46.3, 50.0],
        2220 : [35.7, 37.8, 39.6, 47.5, 50.0],
        2230 : [36.0, 38.2, 40.0, 48.8, 50.0],
        2240 : [36.4, 38.6, 40.4, 50.0, 50.0],
        2250 : [36.7, 39.0, 40.8, 50.0, 50.0],
        2260 : [37.1, 39.4, 41.2, 50.0, 50.0],
        2270 : [37.4, 39.8, 41.5, 50.0, 50.0],
        2280 : [37.8, 40.2, 41.9, 50.0, 50.0],
        2290 : [38.1, 40.6, 42.3, 50.0, 50.0],
        2300 : [38.4, 41.0, 42.7, 50.0, 50.0],
        2310 : [38.8, 41.4, 43.1, 50.0, 50.0],
        2320 : [39.1, 41.8, 43.5, 50.0, 50.0],
        2330 : [39.5, 42.2, 43.8, 50.0, 50.0],
        2340 : [39.8, 42.6, 44.2, 50.0, 50.0],
        2350 : [40.2, 43.0, 44.6, 50.0, 50.0],
        2360 : [40.5, 43.4, 45.0, 50.0, 50.0],
        2370 : [40.9, 43.8, 46.3, 50.0, 50.0],
        2380 : [41.2, 44.2, 47.5, 50.0, 50.0],
        2390 : [41.6, 44.6, 48.8, 50.0, 50.0],
        2400 : [41.9, 45.0, 50.0, 50.0, 50.0],
        2410 : [42.2, 46.3, 50.0, 50.0, 50.0],
        2420 : [42.6, 47.5, 50.0, 50.0, 50.0],
        2430 : [42.9, 48.8, 50.0, 50.0, 50.0],
        2440 : [43.3, 50.0, 50.0, 50.0, 50.0],
        2450 : [43.6, 50.0, 50.0, 50.0, 50.0],
        2460 : [44.0, 50.0, 50.0, 50.0, 50.0],
        2470 : [44.3, 50.0, 50.0, 50.0, 50.0],
        2480 : [44.7, 50.0, 50.0, 50.0, 50.0],
        2490 : [45.0, 50.0, 50.0, 50.0, 50.0],
        2500 : [45.6, 50.0, 50.0, 50.0, 50.0],
        2510 : [46.3, 50.0, 50.0, 50.0, 50.0],
        2520 : [46.9, 50.0, 50.0, 50.0, 50.0],
        2530 : [47.5, 50.0, 50.0, 50.0, 50.0],
        2540 : [48.1, 50.0, 50.0, 50.0, 50.0],
        2550 : [48.8, 50.0, 50.0, 50.0, 50.0],
        2560 : [49.4, 50.0, 50.0, 50.0, 50.0],
        2570 : [50.0, 50.0, 50.0, 50.0, 50.0]
    }

    # Encontrar a faixa etária correspondente
    indice_faixa = None
    for faixa, indice in faixas_etarias.items():
        if faixa[0] <= idade <= faixa[1]:
            indice_faixa = indice
            break

    if indice_faixa is None:
        return 0.0  # Caso a idade não esteja na tabela

    # Encontrar a pontuação correspondente à distância percorrida
    distancias_validas = sorted(tabela_pontos.keys())

    for dist in distancias_validas:
        if distancia <= dist:
            return tabela_pontos[dist][indice_faixa]

    return 50.0  # Caso a distância seja maior que o máximo listado


def calcular_conceito(pontuacao_total, pontos_exercicios=None):
    """
    Calcula o conceito com base na pontuação total e nas regras de aprovação.
    Se algum exercício tiver 0 pontos, o conceito será automaticamente "I - Insuficiente".
    """
    # Verifica se há zero em algum exercício
    if pontos_exercicios and any(valor == 0 for valor in pontos_exercicios.values()):
        return "I - Insuficiente"

    # Verifica se a pontuação mínima total foi atingida
    if pontuacao_total < 20:
        return "I - Insuficiente"
    elif pontuacao_total < 50:
        return "S - Satifastório"
    elif pontuacao_total < 70:
        return "B - Bom"
    elif pontuacao_total < 90:
        return "MB - Muito Bom"
    else:
        return "E - Excelente"



def calcular_tacf ( genero, idade, estatura, cintura, flexoes, abdominais, corrida_distancia ) :
    """
    Calcula pontuação total e conceito do TACF com base nos parâmetros informados.

    Parâmetros:
    - genero: 'masculino'/'m' ou 'feminino'/'f'
    - idade: idade em anos
    - estatura: altura em metros
    - cintura: circunferência da cintura em centímetros
    - flexoes: número de flexões realizadas
    - abdominais: número de abdominais realizados
    - corrida_distancia: distância percorrida em 12 minutos (metros)
    """
    if genero.lower() == 'masculino' or genero.lower() == 'm' :
        pontos_cintura = calcular_pontos_cintura_masculino( cintura, estatura )
        pontos_flexao = calcular_pontos_flexao_masculino( flexoes, idade )
        pontos_abdominal = calcular_pontos_abdominal_masculino( abdominais, idade )
        pontos_corrida = calcular_pontos_corrida_masculino( corrida_distancia, idade )
    else :
        pontos_cintura = calcular_pontos_cintura_feminino( cintura, estatura )
        pontos_flexao = calcular_pontos_flexao_feminino( flexoes, idade )
        pontos_abdominal = calcular_pontos_abdominal_feminino( abdominais, idade )
        pontos_corrida = calcular_pontos_corrida_feminino( corrida_distancia, idade )

    pontuacao_total = pontos_cintura + pontos_flexao + pontos_abdominal + pontos_corrida
    conceito = calcular_conceito( pontuacao_total )

    resultado = {
        'pontos_cintura' : round( pontos_cintura, 2 ),
        'pontos_flexao' : round( pontos_flexao, 2 ),
        'pontos_abdominal' : round( pontos_abdominal, 2 ),
        'pontos_corrida' : round( pontos_corrida, 2 ),
        'pontuacao_total' : round( pontuacao_total, 2 ),
        'conceito' : conceito
    }

    return resultado

